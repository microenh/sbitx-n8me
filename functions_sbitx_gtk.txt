static void tuning_isr(void);
static void set_ui(int id);
static void set_bandwidth(int hz);
static gboolean on_draw_event( GtkWidget* widget, cairo_t *cr, gpointer user_data); 
static gboolean on_key_release (GtkWidget *widget, GdkEventKey *event, gpointer user_data);
static gboolean on_key_press (GtkWidget *widget, GdkEventKey *event, gpointer user_data);
static gboolean on_mouse_press (GtkWidget *widget, GdkEventButton *event, gpointer data); 
static gboolean on_mouse_move (GtkWidget *widget, GdkEventButton *event, gpointer data); 
static gboolean on_mouse_release (GtkWidget *widget, GdkEventButton *event, gpointer data); 
static gboolean on_scroll (GtkWidget *widget, GdkEventScroll *event, gpointer data); 
static gboolean on_window_state (GtkWidget *widget, GdkEventKey *event, gpointer user_data);
static gboolean on_resize(GtkWidget *widget, GdkEventConfigure *event, gpointer user_data);
static gboolean ui_tick(gpointer gook);
static int measure_text(cairo_t *gfx, char *text, int font_entry){
static void draw_text(cairo_t *gfx, int x, int y, char *text, int font_entry){
static void fill_rect(cairo_t *gfx, int x, int y, int w, int h, int color){
static void rect(cairo_t *gfx, int x, int y, int w, int h, int color, int thickness){
void do_cmd(char *cmd);  // hamlib.c
static void cmd_exec(char *cmd);
static int do_spectrum(struct field *f, cairo_t *gfx, int event, int a, int b, int c);
static int do_waterfall(struct field *f, cairo_t *gfx, int event, int a, int b, int c);
static int do_tuning(struct field *f, cairo_t *gfx, int event, int a, int b, int c);
static int do_text(struct field *f, cairo_t *gfx, int event, int a, int b, int c);
static int do_status(struct field *f, cairo_t *gfx, int event, int a, int b, int c);
static int do_console(struct field *f, cairo_t *gfx, int event, int a, int b, int c);
static int do_pitch(struct field *f, cairo_t *gfx, int event, int a, int b, int c);
static int do_kbd(struct field *f, cairo_t *gfx, int event, int a, int b, int c);
// static int do_mouse_move(struct field *f, cairo_t *gfx, int event, int a, int b, int c);
static int do_macro(struct field *f, cairo_t *gfx, int event, int a, int b, int c);
static int do_record(struct field *f, cairo_t *gfx, int event, int a, int b, int c);
static struct field *get_field(const char *cmd);
static void update_field(struct field *f);
static struct field *get_field(const char *cmd){
static struct field *get_field_by_label(char *label){
int get_field_value(char *cmd, char *value){    // logbook.c, modem_ft8.c, telnet.c, webserver.c
int get_field_value_by_label(char *label, char *value){ // modems.c, remote.c
int remote_update_field(int i, char *text){ //webserver.c
int set_field(char *id, char *value){ // macros.c, modem_ft8.c webserver.c
static void console_init(){
static void web_add_string(char *string){
static void  web_write(int style, char *data){
static int console_init_next_line(){
static void write_to_remote_app(int style, char *text){
void write_console(int style, char *text){  // macros.c, modem_ft8.c, modems.c, telnet.c
static void draw_log(cairo_t *gfx, struct field *f){
static void draw_field(GtkWidget *widget, cairo_t *gfx, struct field *f){
static void scale_ui(){
static int mode_id(char *mode_str){
static void save_user_settings(int forced){
static int user_settings_handler(void* user, const char* section, const char* name, const char* value) {
void sdr_modulation_update(int32_t *samples, int count, double scale_up){   //sbitx.c
static void draw_modulation(struct field *f, cairo_t *gfx){
static void init_waterfall(){
static void draw_waterfall(struct field *f, cairo_t *gfx){
static void draw_spectrum_grid(struct field *f_spectrum, cairo_t *gfx){
static void draw_spectrum(struct field *f_spectrum, cairo_t *gfx){
static int waterfall_fn(struct field *f, cairo_t *gfx, int event, int a, int b){
static char* freq_with_separators(char* freq_str){
static void draw_dial(struct field *f, cairo_t *gfx){
static void invalidate_rect(int x, int y, int width, int height){
static void redraw_main_screen(GtkWidget *widget, cairo_t *gfx){
static gboolean on_draw_event( GtkWidget* widget, cairo_t *cr, gpointer user_data ) {
static gboolean on_resize(GtkWidget *widget, GdkEventConfigure *event, gpointer user_data) {
static void update_field(struct field *f){
static void hover_field(struct field *f){
static void edit_field(struct field *f, int action){
static void focus_field(struct field *f){
time_t time_sbitx(){    // logbook.c, modem_ft8.c, modems.c, 
static void set_operating_freq(int dial_freq, char *response){
void abort_tx(){    // modems.c
static int do_spectrum(struct field *f, cairo_t *gfx, int event, int a, int b, int c){
static int do_waterfall(struct field *f, cairo_t *gfx, int event, int a, int b, int c){
void remote_execute(char *cmd){ // remote.c, webserver.c
static void call_wipe(){
static void update_log_ed(){
static int do_console(struct field *f, cairo_t *gfx, int event, int a, int b, int c){
static int do_status(struct field *f, cairo_t *gfx, int event, int a, int b, int c){
static void execute_app(char *app){
static int do_text(struct field *f, cairo_t *gfx, int event, int a, int b, int c){
static int do_pitch(struct field *f, cairo_t *gfx, int event, int a, int b, int c){
static int do_tuning(struct field *f, cairo_t *gfx, int event, int a, int b, int c){
static int do_kbd(struct field *f, cairo_t *gfx, int event, int a, int b, int c){
static void write_call_log(){
static void interpret_log(char *text){
void macro_get_var(char *var, char *s){ // macros.d
static void open_url(char *url){
static void qrz(char *callsign){
static int do_macro(struct field *f, cairo_t *gfx, int event, int a, int b, int c){
static int do_record(struct field *f, cairo_t *gfx, int event, int a, int b, int c){
void tx_on(int trigger){    // hamlib.c, modems.c, sbitx.c
void tx_off(){  // modems.c
static int layout_handler(void* user, const char* section, const char* name, const char* value) {
static void set_ui(int id){
static void cw_key(int state){
static gboolean on_key_release (GtkWidget *widget, GdkEventKey *event, gpointer user_data) {
static gboolean on_key_press (GtkWidget *widget, GdkEventKey *event, gpointer user_data) {
static gboolean on_scroll (GtkWidget *widget, GdkEventScroll *event, gpointer data) {
static gboolean on_window_state (GtkWidget *widget, GdkEventKey *event, gpointer user_data) {
static gboolean on_mouse_release (GtkWidget *widget, GdkEventButton *event, gpointer data) {
static gboolean on_mouse_move (GtkWidget *widget, GdkEventButton *event, gpointer data) {
static gboolean on_mouse_press (GtkWidget *widget, GdkEventButton *event, gpointer data) {
static void redraw(){
int key_poll(){ modems.c
static void enc_init(struct encoder *e, int speed, int pin_a, int pin_b){
static int enc_state (struct encoder *e) {
static int enc_read(struct encoder *e) {
static void tuning_isr(void){
static void query_swr(){
static void hw_init(){
void hamlib_tx(int tx_input){   // hamlib.c
int get_cw_delay(){ // modems.c
int get_cw_input_method(){  // modems.c
int get_pitch(){    // modems.c
int get_cw_tx_pitch(){  // modem_ft8.c
static int get_data_delay(){
int get_wpm(){  // modems.c
long get_freq(){    // hamlib.c
static oid set_bandwidth(int hz){
static void set_mode(char *mode){
static void get_mode(char *mode){
static void bin_dump(int length, uint8_t *data){
int  web_get_console(char *buff, int max){  // webserver.c
void web_get_spectrum(char *buff){  // webserver.c
static gboolean ui_tick(gpointer gook){
static void ui_init(int argc, char *argv[]){
int get_tx_data_byte(char *c){  // modems.c
int get_tx_data_length(){   // modems.c
int is_in_tx(){ // modems.c
static void change_band(char *request){
static void meter_calibrate(){
void do_cmd(char *cmd){	    // hamlib.c
static void enter_qso(char *args){
static void cmd_exec(char *cmd){
static void ensure_single_instance(){
int main( int argc, char* argv[] ) {